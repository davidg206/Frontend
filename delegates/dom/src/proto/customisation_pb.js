// source: customisation.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.proto.RuntimeOptions', null, global);
goog.exportSymbol('proto.proto.RuntimeOptions.PixelStreaming', null, global);
goog.exportSymbol('proto.proto.RuntimeOptions.PixelStreaming.WebRTC', null, global);
goog.exportSymbol('proto.proto.RuntimeOptions.Resolution', null, global);
goog.exportSymbol('proto.proto.RuntimeOptions.VolumeMounts', null, global);
goog.exportSymbol('proto.proto.UpdateRuntimeOptionsRequest', null, global);
goog.exportSymbol('proto.proto.UpdateRuntimeOptionsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateRuntimeOptionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UpdateRuntimeOptionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UpdateRuntimeOptionsRequest.displayName = 'proto.proto.UpdateRuntimeOptionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateRuntimeOptionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UpdateRuntimeOptionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UpdateRuntimeOptionsResponse.displayName = 'proto.proto.UpdateRuntimeOptionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RuntimeOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.RuntimeOptions.repeatedFields_, null);
};
goog.inherits(proto.proto.RuntimeOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RuntimeOptions.displayName = 'proto.proto.RuntimeOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RuntimeOptions.Resolution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RuntimeOptions.Resolution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RuntimeOptions.Resolution.displayName = 'proto.proto.RuntimeOptions.Resolution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RuntimeOptions.PixelStreaming = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RuntimeOptions.PixelStreaming, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RuntimeOptions.PixelStreaming.displayName = 'proto.proto.RuntimeOptions.PixelStreaming';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RuntimeOptions.PixelStreaming.WebRTC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RuntimeOptions.PixelStreaming.WebRTC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RuntimeOptions.PixelStreaming.WebRTC.displayName = 'proto.proto.RuntimeOptions.PixelStreaming.WebRTC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RuntimeOptions.VolumeMounts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RuntimeOptions.VolumeMounts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RuntimeOptions.VolumeMounts.displayName = 'proto.proto.RuntimeOptions.VolumeMounts';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateRuntimeOptionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateRuntimeOptionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateRuntimeOptionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateRuntimeOptionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pluginoptions: jspb.Message.getFieldWithDefault(msg, 2, ""),
    runtimeoptions: (f = msg.getRuntimeoptions()) && proto.proto.RuntimeOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateRuntimeOptionsRequest}
 */
proto.proto.UpdateRuntimeOptionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateRuntimeOptionsRequest;
  return proto.proto.UpdateRuntimeOptionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateRuntimeOptionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateRuntimeOptionsRequest}
 */
proto.proto.UpdateRuntimeOptionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstance(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPluginoptions(value);
      break;
    case 3:
      var value = new proto.proto.RuntimeOptions;
      reader.readMessage(value,proto.proto.RuntimeOptions.deserializeBinaryFromReader);
      msg.setRuntimeoptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateRuntimeOptionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateRuntimeOptionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateRuntimeOptionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateRuntimeOptionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPluginoptions();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRuntimeoptions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.RuntimeOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string instance = 1;
 * @return {string}
 */
proto.proto.UpdateRuntimeOptionsRequest.prototype.getInstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UpdateRuntimeOptionsRequest} returns this
 */
proto.proto.UpdateRuntimeOptionsRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pluginOptions = 2;
 * @return {string}
 */
proto.proto.UpdateRuntimeOptionsRequest.prototype.getPluginoptions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UpdateRuntimeOptionsRequest} returns this
 */
proto.proto.UpdateRuntimeOptionsRequest.prototype.setPluginoptions = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional RuntimeOptions runtimeOptions = 3;
 * @return {?proto.proto.RuntimeOptions}
 */
proto.proto.UpdateRuntimeOptionsRequest.prototype.getRuntimeoptions = function() {
  return /** @type{?proto.proto.RuntimeOptions} */ (
    jspb.Message.getWrapperField(this, proto.proto.RuntimeOptions, 3));
};


/**
 * @param {?proto.proto.RuntimeOptions|undefined} value
 * @return {!proto.proto.UpdateRuntimeOptionsRequest} returns this
*/
proto.proto.UpdateRuntimeOptionsRequest.prototype.setRuntimeoptions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UpdateRuntimeOptionsRequest} returns this
 */
proto.proto.UpdateRuntimeOptionsRequest.prototype.clearRuntimeoptions = function() {
  return this.setRuntimeoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UpdateRuntimeOptionsRequest.prototype.hasRuntimeoptions = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateRuntimeOptionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateRuntimeOptionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateRuntimeOptionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateRuntimeOptionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    runtimeoptions: (f = msg.getRuntimeoptions()) && proto.proto.RuntimeOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateRuntimeOptionsResponse}
 */
proto.proto.UpdateRuntimeOptionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateRuntimeOptionsResponse;
  return proto.proto.UpdateRuntimeOptionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateRuntimeOptionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateRuntimeOptionsResponse}
 */
proto.proto.UpdateRuntimeOptionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.RuntimeOptions;
      reader.readMessage(value,proto.proto.RuntimeOptions.deserializeBinaryFromReader);
      msg.setRuntimeoptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateRuntimeOptionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateRuntimeOptionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateRuntimeOptionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateRuntimeOptionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRuntimeoptions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.RuntimeOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional RuntimeOptions runtimeOptions = 1;
 * @return {?proto.proto.RuntimeOptions}
 */
proto.proto.UpdateRuntimeOptionsResponse.prototype.getRuntimeoptions = function() {
  return /** @type{?proto.proto.RuntimeOptions} */ (
    jspb.Message.getWrapperField(this, proto.proto.RuntimeOptions, 1));
};


/**
 * @param {?proto.proto.RuntimeOptions|undefined} value
 * @return {!proto.proto.UpdateRuntimeOptionsResponse} returns this
*/
proto.proto.UpdateRuntimeOptionsResponse.prototype.setRuntimeoptions = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UpdateRuntimeOptionsResponse} returns this
 */
proto.proto.UpdateRuntimeOptionsResponse.prototype.clearRuntimeoptions = function() {
  return this.setRuntimeoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UpdateRuntimeOptionsResponse.prototype.hasRuntimeoptions = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.RuntimeOptions.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RuntimeOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RuntimeOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RuntimeOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RuntimeOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    resolution: (f = msg.getResolution()) && proto.proto.RuntimeOptions.Resolution.toObject(includeInstance, f),
    argsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    environmentvariablesMap: (f = msg.getEnvironmentvariablesMap()) ? f.toObject(includeInstance, undefined) : [],
    volumemountsList: jspb.Message.toObjectList(msg.getVolumemountsList(),
    proto.proto.RuntimeOptions.VolumeMounts.toObject, includeInstance),
    pixelstreaming: (f = msg.getPixelstreaming()) && proto.proto.RuntimeOptions.PixelStreaming.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RuntimeOptions}
 */
proto.proto.RuntimeOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RuntimeOptions;
  return proto.proto.RuntimeOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RuntimeOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RuntimeOptions}
 */
proto.proto.RuntimeOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.RuntimeOptions.Resolution;
      reader.readMessage(value,proto.proto.RuntimeOptions.Resolution.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 3:
      var value = msg.getEnvironmentvariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = new proto.proto.RuntimeOptions.VolumeMounts;
      reader.readMessage(value,proto.proto.RuntimeOptions.VolumeMounts.deserializeBinaryFromReader);
      msg.addVolumemounts(value);
      break;
    case 5:
      var value = new proto.proto.RuntimeOptions.PixelStreaming;
      reader.readMessage(value,proto.proto.RuntimeOptions.PixelStreaming.deserializeBinaryFromReader);
      msg.setPixelstreaming(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RuntimeOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RuntimeOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RuntimeOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RuntimeOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.RuntimeOptions.Resolution.serializeBinaryToWriter
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getEnvironmentvariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getVolumemountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.RuntimeOptions.VolumeMounts.serializeBinaryToWriter
    );
  }
  f = message.getPixelstreaming();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.RuntimeOptions.PixelStreaming.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RuntimeOptions.Resolution.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RuntimeOptions.Resolution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RuntimeOptions.Resolution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RuntimeOptions.Resolution.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RuntimeOptions.Resolution}
 */
proto.proto.RuntimeOptions.Resolution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RuntimeOptions.Resolution;
  return proto.proto.RuntimeOptions.Resolution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RuntimeOptions.Resolution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RuntimeOptions.Resolution}
 */
proto.proto.RuntimeOptions.Resolution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RuntimeOptions.Resolution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RuntimeOptions.Resolution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RuntimeOptions.Resolution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RuntimeOptions.Resolution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.proto.RuntimeOptions.Resolution.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RuntimeOptions.Resolution} returns this
 */
proto.proto.RuntimeOptions.Resolution.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.proto.RuntimeOptions.Resolution.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RuntimeOptions.Resolution} returns this
 */
proto.proto.RuntimeOptions.Resolution.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RuntimeOptions.PixelStreaming.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RuntimeOptions.PixelStreaming.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RuntimeOptions.PixelStreaming} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RuntimeOptions.PixelStreaming.toObject = function(includeInstance, msg) {
  var f, obj = {
    webrtc: (f = msg.getWebrtc()) && proto.proto.RuntimeOptions.PixelStreaming.WebRTC.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RuntimeOptions.PixelStreaming}
 */
proto.proto.RuntimeOptions.PixelStreaming.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RuntimeOptions.PixelStreaming;
  return proto.proto.RuntimeOptions.PixelStreaming.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RuntimeOptions.PixelStreaming} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RuntimeOptions.PixelStreaming}
 */
proto.proto.RuntimeOptions.PixelStreaming.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.RuntimeOptions.PixelStreaming.WebRTC;
      reader.readMessage(value,proto.proto.RuntimeOptions.PixelStreaming.WebRTC.deserializeBinaryFromReader);
      msg.setWebrtc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RuntimeOptions.PixelStreaming.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RuntimeOptions.PixelStreaming.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RuntimeOptions.PixelStreaming} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RuntimeOptions.PixelStreaming.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWebrtc();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.RuntimeOptions.PixelStreaming.WebRTC.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RuntimeOptions.PixelStreaming.WebRTC.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RuntimeOptions.PixelStreaming.WebRTC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RuntimeOptions.PixelStreaming.WebRTC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RuntimeOptions.PixelStreaming.WebRTC.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxfps: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RuntimeOptions.PixelStreaming.WebRTC}
 */
proto.proto.RuntimeOptions.PixelStreaming.WebRTC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RuntimeOptions.PixelStreaming.WebRTC;
  return proto.proto.RuntimeOptions.PixelStreaming.WebRTC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RuntimeOptions.PixelStreaming.WebRTC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RuntimeOptions.PixelStreaming.WebRTC}
 */
proto.proto.RuntimeOptions.PixelStreaming.WebRTC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxfps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RuntimeOptions.PixelStreaming.WebRTC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RuntimeOptions.PixelStreaming.WebRTC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RuntimeOptions.PixelStreaming.WebRTC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RuntimeOptions.PixelStreaming.WebRTC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxfps();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 maxFPS = 1;
 * @return {number}
 */
proto.proto.RuntimeOptions.PixelStreaming.WebRTC.prototype.getMaxfps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RuntimeOptions.PixelStreaming.WebRTC} returns this
 */
proto.proto.RuntimeOptions.PixelStreaming.WebRTC.prototype.setMaxfps = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WebRTC webRTC = 1;
 * @return {?proto.proto.RuntimeOptions.PixelStreaming.WebRTC}
 */
proto.proto.RuntimeOptions.PixelStreaming.prototype.getWebrtc = function() {
  return /** @type{?proto.proto.RuntimeOptions.PixelStreaming.WebRTC} */ (
    jspb.Message.getWrapperField(this, proto.proto.RuntimeOptions.PixelStreaming.WebRTC, 1));
};


/**
 * @param {?proto.proto.RuntimeOptions.PixelStreaming.WebRTC|undefined} value
 * @return {!proto.proto.RuntimeOptions.PixelStreaming} returns this
*/
proto.proto.RuntimeOptions.PixelStreaming.prototype.setWebrtc = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.RuntimeOptions.PixelStreaming} returns this
 */
proto.proto.RuntimeOptions.PixelStreaming.prototype.clearWebrtc = function() {
  return this.setWebrtc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.RuntimeOptions.PixelStreaming.prototype.hasWebrtc = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RuntimeOptions.VolumeMounts.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RuntimeOptions.VolumeMounts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RuntimeOptions.VolumeMounts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RuntimeOptions.VolumeMounts.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mountpath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    readonly: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RuntimeOptions.VolumeMounts}
 */
proto.proto.RuntimeOptions.VolumeMounts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RuntimeOptions.VolumeMounts;
  return proto.proto.RuntimeOptions.VolumeMounts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RuntimeOptions.VolumeMounts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RuntimeOptions.VolumeMounts}
 */
proto.proto.RuntimeOptions.VolumeMounts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMountpath(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RuntimeOptions.VolumeMounts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RuntimeOptions.VolumeMounts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RuntimeOptions.VolumeMounts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RuntimeOptions.VolumeMounts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMountpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReadonly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.RuntimeOptions.VolumeMounts.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.RuntimeOptions.VolumeMounts} returns this
 */
proto.proto.RuntimeOptions.VolumeMounts.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mountPath = 2;
 * @return {string}
 */
proto.proto.RuntimeOptions.VolumeMounts.prototype.getMountpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.RuntimeOptions.VolumeMounts} returns this
 */
proto.proto.RuntimeOptions.VolumeMounts.prototype.setMountpath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool readOnly = 3;
 * @return {boolean}
 */
proto.proto.RuntimeOptions.VolumeMounts.prototype.getReadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.RuntimeOptions.VolumeMounts} returns this
 */
proto.proto.RuntimeOptions.VolumeMounts.prototype.setReadonly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional Resolution resolution = 1;
 * @return {?proto.proto.RuntimeOptions.Resolution}
 */
proto.proto.RuntimeOptions.prototype.getResolution = function() {
  return /** @type{?proto.proto.RuntimeOptions.Resolution} */ (
    jspb.Message.getWrapperField(this, proto.proto.RuntimeOptions.Resolution, 1));
};


/**
 * @param {?proto.proto.RuntimeOptions.Resolution|undefined} value
 * @return {!proto.proto.RuntimeOptions} returns this
*/
proto.proto.RuntimeOptions.prototype.setResolution = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.RuntimeOptions} returns this
 */
proto.proto.RuntimeOptions.prototype.clearResolution = function() {
  return this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.RuntimeOptions.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string args = 2;
 * @return {!Array<string>}
 */
proto.proto.RuntimeOptions.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.RuntimeOptions} returns this
 */
proto.proto.RuntimeOptions.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.RuntimeOptions} returns this
 */
proto.proto.RuntimeOptions.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.RuntimeOptions} returns this
 */
proto.proto.RuntimeOptions.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * map<string, string> environmentVariables = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.proto.RuntimeOptions.prototype.getEnvironmentvariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.RuntimeOptions} returns this
 */
proto.proto.RuntimeOptions.prototype.clearEnvironmentvariablesMap = function() {
  this.getEnvironmentvariablesMap().clear();
  return this;
};


/**
 * repeated VolumeMounts volumeMounts = 4;
 * @return {!Array<!proto.proto.RuntimeOptions.VolumeMounts>}
 */
proto.proto.RuntimeOptions.prototype.getVolumemountsList = function() {
  return /** @type{!Array<!proto.proto.RuntimeOptions.VolumeMounts>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.RuntimeOptions.VolumeMounts, 4));
};


/**
 * @param {!Array<!proto.proto.RuntimeOptions.VolumeMounts>} value
 * @return {!proto.proto.RuntimeOptions} returns this
*/
proto.proto.RuntimeOptions.prototype.setVolumemountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.RuntimeOptions.VolumeMounts=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.RuntimeOptions.VolumeMounts}
 */
proto.proto.RuntimeOptions.prototype.addVolumemounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.RuntimeOptions.VolumeMounts, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.RuntimeOptions} returns this
 */
proto.proto.RuntimeOptions.prototype.clearVolumemountsList = function() {
  return this.setVolumemountsList([]);
};


/**
 * optional PixelStreaming pixelStreaming = 5;
 * @return {?proto.proto.RuntimeOptions.PixelStreaming}
 */
proto.proto.RuntimeOptions.prototype.getPixelstreaming = function() {
  return /** @type{?proto.proto.RuntimeOptions.PixelStreaming} */ (
    jspb.Message.getWrapperField(this, proto.proto.RuntimeOptions.PixelStreaming, 5));
};


/**
 * @param {?proto.proto.RuntimeOptions.PixelStreaming|undefined} value
 * @return {!proto.proto.RuntimeOptions} returns this
*/
proto.proto.RuntimeOptions.prototype.setPixelstreaming = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.RuntimeOptions} returns this
 */
proto.proto.RuntimeOptions.prototype.clearPixelstreaming = function() {
  return this.setPixelstreaming(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.RuntimeOptions.prototype.hasPixelstreaming = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.proto);
