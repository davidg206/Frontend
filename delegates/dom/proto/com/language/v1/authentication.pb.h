// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authentication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 3021000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_authentication_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_authentication_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_authentication_2eproto;
namespace proto {
class AuthenticationRequest;
struct AuthenticationRequestDefaultTypeInternal;
extern AuthenticationRequestDefaultTypeInternal _AuthenticationRequest_default_instance_;
class AuthenticationResponse;
struct AuthenticationResponseDefaultTypeInternal;
extern AuthenticationResponseDefaultTypeInternal _AuthenticationResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template <>
::proto::AuthenticationRequest* Arena::CreateMaybeMessage<::proto::AuthenticationRequest>(Arena*);
template <>
::proto::AuthenticationResponse* Arena::CreateMaybeMessage<::proto::AuthenticationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace proto {
enum AuthenticationResponse_Outcome : int {
  AuthenticationResponse_Outcome_REDIRECT = 0,
  AuthenticationResponse_Outcome_INVALID_TOKEN = 1,
  AuthenticationResponse_Outcome_AUTHENTICATED = 2,
  AuthenticationResponse_Outcome_ERROR = 3,
  AuthenticationResponse_Outcome_AuthenticationResponse_Outcome_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuthenticationResponse_Outcome_AuthenticationResponse_Outcome_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuthenticationResponse_Outcome_IsValid(int value);
constexpr AuthenticationResponse_Outcome AuthenticationResponse_Outcome_Outcome_MIN = static_cast<AuthenticationResponse_Outcome>(0);
constexpr AuthenticationResponse_Outcome AuthenticationResponse_Outcome_Outcome_MAX = static_cast<AuthenticationResponse_Outcome>(3);
constexpr int AuthenticationResponse_Outcome_Outcome_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
AuthenticationResponse_Outcome_descriptor();
template <typename T>
const std::string& AuthenticationResponse_Outcome_Name(T value) {
  static_assert(std::is_same<T, AuthenticationResponse_Outcome>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Outcome_Name().");
  return AuthenticationResponse_Outcome_Name(static_cast<AuthenticationResponse_Outcome>(value));
}
template <>
inline const std::string& AuthenticationResponse_Outcome_Name(AuthenticationResponse_Outcome value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<AuthenticationResponse_Outcome_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool AuthenticationResponse_Outcome_Parse(absl::string_view name, AuthenticationResponse_Outcome* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticationResponse_Outcome>(
      AuthenticationResponse_Outcome_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class AuthenticationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.AuthenticationRequest) */ {
 public:
  inline AuthenticationRequest() : AuthenticationRequest(nullptr) {}
  ~AuthenticationRequest() override;
  explicit PROTOBUF_CONSTEXPR AuthenticationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationRequest(const AuthenticationRequest& from);
  AuthenticationRequest(AuthenticationRequest&& from) noexcept
    : AuthenticationRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticationRequest& operator=(const AuthenticationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationRequest& operator=(AuthenticationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticationRequest*>(
               &_AuthenticationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthenticationRequest& a, AuthenticationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthenticationRequest& from) {
    AuthenticationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.AuthenticationRequest";
  }
  protected:
  explicit AuthenticationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kProviderFieldNumber = 2,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // string provider = 2;
  void clear_provider() ;
  const std::string& provider() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_provider(Arg_&& arg, Args_... args);
  std::string* mutable_provider();
  PROTOBUF_NODISCARD std::string* release_provider();
  void set_allocated_provider(std::string* ptr);

  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(
      const std::string& value);
  std::string* _internal_mutable_provider();

  public:
  // @@protoc_insertion_point(class_scope:proto.AuthenticationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authentication_2eproto;
};// -------------------------------------------------------------------

class AuthenticationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.AuthenticationResponse) */ {
 public:
  inline AuthenticationResponse() : AuthenticationResponse(nullptr) {}
  ~AuthenticationResponse() override;
  explicit PROTOBUF_CONSTEXPR AuthenticationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationResponse(const AuthenticationResponse& from);
  AuthenticationResponse(AuthenticationResponse&& from) noexcept
    : AuthenticationResponse() {
    *this = ::std::move(from);
  }

  inline AuthenticationResponse& operator=(const AuthenticationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationResponse& operator=(AuthenticationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kUrl = 2,
    kId = 3,
    kError = 4,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const AuthenticationResponse* internal_default_instance() {
    return reinterpret_cast<const AuthenticationResponse*>(
               &_AuthenticationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthenticationResponse& a, AuthenticationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthenticationResponse& from) {
    AuthenticationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.AuthenticationResponse";
  }
  protected:
  explicit AuthenticationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Outcome = AuthenticationResponse_Outcome;
  static constexpr Outcome REDIRECT = AuthenticationResponse_Outcome_REDIRECT;
  static constexpr Outcome INVALID_TOKEN = AuthenticationResponse_Outcome_INVALID_TOKEN;
  static constexpr Outcome AUTHENTICATED = AuthenticationResponse_Outcome_AUTHENTICATED;
  static constexpr Outcome ERROR = AuthenticationResponse_Outcome_ERROR;
  static inline bool Outcome_IsValid(int value) {
    return AuthenticationResponse_Outcome_IsValid(value);
  }
  static constexpr Outcome Outcome_MIN = AuthenticationResponse_Outcome_Outcome_MIN;
  static constexpr Outcome Outcome_MAX = AuthenticationResponse_Outcome_Outcome_MAX;
  static constexpr int Outcome_ARRAYSIZE = AuthenticationResponse_Outcome_Outcome_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Outcome_descriptor() {
    return AuthenticationResponse_Outcome_descriptor();
  }
  template <typename T>
  static inline const std::string& Outcome_Name(T value) {
    return AuthenticationResponse_Outcome_Name(value);
  }
  static inline bool Outcome_Parse(absl::string_view name, Outcome* value) {
    return AuthenticationResponse_Outcome_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutcomeFieldNumber = 1,
    kUrlFieldNumber = 2,
    kIdFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // .proto.AuthenticationResponse.Outcome outcome = 1;
  void clear_outcome() ;
  ::proto::AuthenticationResponse_Outcome outcome() const;
  void set_outcome(::proto::AuthenticationResponse_Outcome value);

  private:
  ::proto::AuthenticationResponse_Outcome _internal_outcome() const;
  void _internal_set_outcome(::proto::AuthenticationResponse_Outcome value);

  public:
  // string url = 2;
  bool has_url() const;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string id = 3;
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string error = 4;
  bool has_error() const;
  void clear_error() ;
  const std::string& error() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* ptr);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:proto.AuthenticationResponse)
 private:
  class _Internal;
  void set_has_url();
  void set_has_id();
  void set_has_error();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int outcome_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authentication_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AuthenticationRequest

// string token = 1;
inline void AuthenticationRequest::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& AuthenticationRequest::token() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticationRequest::set_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.AuthenticationRequest.token)
}
inline std::string* AuthenticationRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:proto.AuthenticationRequest.token)
  return _s;
}
inline const std::string& AuthenticationRequest::_internal_token() const {
  return _impl_.token_.Get();
}
inline void AuthenticationRequest::_internal_set_token(const std::string& value) {
  ;


  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::_internal_mutable_token() {
  ;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::release_token() {
  // @@protoc_insertion_point(field_release:proto.AuthenticationRequest.token)
  return _impl_.token_.Release();
}
inline void AuthenticationRequest::set_allocated_token(std::string* value) {
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.AuthenticationRequest.token)
}

// string provider = 2;
inline void AuthenticationRequest::clear_provider() {
  _impl_.provider_.ClearToEmpty();
}
inline const std::string& AuthenticationRequest::provider() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationRequest.provider)
  return _internal_provider();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticationRequest::set_provider(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.provider_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.AuthenticationRequest.provider)
}
inline std::string* AuthenticationRequest::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:proto.AuthenticationRequest.provider)
  return _s;
}
inline const std::string& AuthenticationRequest::_internal_provider() const {
  return _impl_.provider_.Get();
}
inline void AuthenticationRequest::_internal_set_provider(const std::string& value) {
  ;


  _impl_.provider_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::_internal_mutable_provider() {
  ;
  return _impl_.provider_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::release_provider() {
  // @@protoc_insertion_point(field_release:proto.AuthenticationRequest.provider)
  return _impl_.provider_.Release();
}
inline void AuthenticationRequest::set_allocated_provider(std::string* value) {
  _impl_.provider_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.provider_.IsDefault()) {
          _impl_.provider_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.AuthenticationRequest.provider)
}

// -------------------------------------------------------------------

// AuthenticationResponse

// .proto.AuthenticationResponse.Outcome outcome = 1;
inline void AuthenticationResponse::clear_outcome() {
  _impl_.outcome_ = 0;
}
inline ::proto::AuthenticationResponse_Outcome AuthenticationResponse::outcome() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationResponse.outcome)
  return _internal_outcome();
}
inline void AuthenticationResponse::set_outcome(::proto::AuthenticationResponse_Outcome value) {
   _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:proto.AuthenticationResponse.outcome)
}
inline ::proto::AuthenticationResponse_Outcome AuthenticationResponse::_internal_outcome() const {
  return static_cast<::proto::AuthenticationResponse_Outcome>(_impl_.outcome_);
}
inline void AuthenticationResponse::_internal_set_outcome(::proto::AuthenticationResponse_Outcome value) {
  ;
  _impl_.outcome_ = value;
}

// string url = 2;
inline bool AuthenticationResponse::has_url() const {
  return payload_case() == kUrl;
}
inline void AuthenticationResponse::set_has_url() {
  _impl_._oneof_case_[0] = kUrl;
}
inline void AuthenticationResponse::clear_url() {
  if (payload_case() == kUrl) {
    _impl_.payload_.url_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& AuthenticationResponse::url() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticationResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  if (payload_case() != kUrl) {
    clear_payload();

    set_has_url();
    _impl_.payload_.url_.InitDefault();
  }
  _impl_.payload_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.AuthenticationResponse.url)
}
inline std::string* AuthenticationResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:proto.AuthenticationResponse.url)
  return _s;
}
inline const std::string& AuthenticationResponse::_internal_url() const {
  if (payload_case() != kUrl) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.payload_.url_.Get();
}
inline void AuthenticationResponse::_internal_set_url(const std::string& value) {
  if (payload_case() != kUrl) {
    clear_payload();

    set_has_url();
    _impl_.payload_.url_.InitDefault();
  }


  _impl_.payload_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::_internal_mutable_url() {
  if (payload_case() != kUrl) {
    clear_payload();

    set_has_url();
    _impl_.payload_.url_.InitDefault();
  }
  return _impl_.payload_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::release_url() {
  // @@protoc_insertion_point(field_release:proto.AuthenticationResponse.url)
  if (payload_case() != kUrl) {
    return nullptr;
  }
  clear_has_payload();
  return _impl_.payload_.url_.Release();
}
inline void AuthenticationResponse::set_allocated_url(std::string* value) {
  if (has_payload()) {
    clear_payload();
  }
  if (value != nullptr) {
    set_has_url();
    _impl_.payload_.url_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AuthenticationResponse.url)
}

// string id = 3;
inline bool AuthenticationResponse::has_id() const {
  return payload_case() == kId;
}
inline void AuthenticationResponse::set_has_id() {
  _impl_._oneof_case_[0] = kId;
}
inline void AuthenticationResponse::clear_id() {
  if (payload_case() == kId) {
    _impl_.payload_.id_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& AuthenticationResponse::id() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationResponse.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticationResponse::set_id(Arg_&& arg,
                                                     Args_... args) {
  if (payload_case() != kId) {
    clear_payload();

    set_has_id();
    _impl_.payload_.id_.InitDefault();
  }
  _impl_.payload_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.AuthenticationResponse.id)
}
inline std::string* AuthenticationResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:proto.AuthenticationResponse.id)
  return _s;
}
inline const std::string& AuthenticationResponse::_internal_id() const {
  if (payload_case() != kId) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.payload_.id_.Get();
}
inline void AuthenticationResponse::_internal_set_id(const std::string& value) {
  if (payload_case() != kId) {
    clear_payload();

    set_has_id();
    _impl_.payload_.id_.InitDefault();
  }


  _impl_.payload_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::_internal_mutable_id() {
  if (payload_case() != kId) {
    clear_payload();

    set_has_id();
    _impl_.payload_.id_.InitDefault();
  }
  return _impl_.payload_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::release_id() {
  // @@protoc_insertion_point(field_release:proto.AuthenticationResponse.id)
  if (payload_case() != kId) {
    return nullptr;
  }
  clear_has_payload();
  return _impl_.payload_.id_.Release();
}
inline void AuthenticationResponse::set_allocated_id(std::string* value) {
  if (has_payload()) {
    clear_payload();
  }
  if (value != nullptr) {
    set_has_id();
    _impl_.payload_.id_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AuthenticationResponse.id)
}

// string error = 4;
inline bool AuthenticationResponse::has_error() const {
  return payload_case() == kError;
}
inline void AuthenticationResponse::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline void AuthenticationResponse::clear_error() {
  if (payload_case() == kError) {
    _impl_.payload_.error_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& AuthenticationResponse::error() const {
  // @@protoc_insertion_point(field_get:proto.AuthenticationResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticationResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  if (payload_case() != kError) {
    clear_payload();

    set_has_error();
    _impl_.payload_.error_.InitDefault();
  }
  _impl_.payload_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.AuthenticationResponse.error)
}
inline std::string* AuthenticationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:proto.AuthenticationResponse.error)
  return _s;
}
inline const std::string& AuthenticationResponse::_internal_error() const {
  if (payload_case() != kError) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.payload_.error_.Get();
}
inline void AuthenticationResponse::_internal_set_error(const std::string& value) {
  if (payload_case() != kError) {
    clear_payload();

    set_has_error();
    _impl_.payload_.error_.InitDefault();
  }


  _impl_.payload_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::_internal_mutable_error() {
  if (payload_case() != kError) {
    clear_payload();

    set_has_error();
    _impl_.payload_.error_.InitDefault();
  }
  return _impl_.payload_.error_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::release_error() {
  // @@protoc_insertion_point(field_release:proto.AuthenticationResponse.error)
  if (payload_case() != kError) {
    return nullptr;
  }
  clear_has_payload();
  return _impl_.payload_.error_.Release();
}
inline void AuthenticationResponse::set_allocated_error(std::string* value) {
  if (has_payload()) {
    clear_payload();
  }
  if (value != nullptr) {
    set_has_error();
    _impl_.payload_.error_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AuthenticationResponse.error)
}

inline bool AuthenticationResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void AuthenticationResponse::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline AuthenticationResponse::PayloadCase AuthenticationResponse::payload_case() const {
  return AuthenticationResponse::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::proto::AuthenticationResponse_Outcome> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::proto::AuthenticationResponse_Outcome>() {
  return ::proto::AuthenticationResponse_Outcome_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto_2epb_2eh
